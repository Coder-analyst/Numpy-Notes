# -*- coding: utf-8 -*-
"""Numpy.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xloFlxtxvB2cRsw6xcKr8QeAzsrd5QXS

**NumPy:**

(Numerical Python) is a Python library used for working with numbers, especially large sets of numbers, in an efficient way. It provides support for:

1. Arrays – Like lists but much faster and more powerful
2. Mathematical Operations – Like addition, subtraction, multiplication, and division on arrays
3. Statistical Functions – Mean, median, standard deviation, etc.
4. Linear Algebra – Matrix operations, solving equations

**Why Numpyy is Faster :**

1. Fatser bcoz it contains less memory data stored in the terms of bytes
2. No type checking while iterating through objects

-> It is faster due to its contiguous memory
So let's start coding
"""

# Basic code
import numpy as np
a = np.array([1,2,3])
print(a)

b = np.array([[9.0,8.0,7.0],[6.0,5.0,4.0]])
print(b)

# To get the dimension
a.ndim

# To get shape that means (How many Row ,How many column)
b.shape

# It help to understand the datatype
a.dtype

# Get size of the item but start from the 0 index
# a.itemsize

# Get the total size so in a there are 3 data stored (1 int takes 8 bytes in the 64 bit system)
a.nbytes

# Help us to specify how many elements are in it
a.size

"""# Accesing /changing specific elements , rows, columns etc"""

import numpy as np
c = np.array([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]])
print(c)

# To get the specific element [row,column]
# row no. starts from 0
c[1,5]

# To get the specific row
c[0,:]

# To get the specific column
c[:,2]

# Little more accurate readingg with index [start_index : end_index : stepsize]
c[0,1:-1:2]

# Summary question of 2d
c[1,5] = 20

c[:,2] = [1,2]
print(c)

"""# 3-d example:

"""

b = np.array([[[1,2,],[3,4],[5,6],[7,8]]])
print(b)

# To get the specific element (revise from chatgpt)
b[0,1,1]

# To undergo for replace option
# b[:,1,:] = [[9,9,9],[8,8]]

"""# Initializing different type of array:"""

# To make the matrix of zero
import numpy as np
np.zeros((2,3))

# To make the matrix of ones
np.ones((4,2,2),dtype='int32')

# To make the matrix of any number which we write
np.full((2,3),99)

# Any other no. which is full_like
# np.full_like(b,4)

# To make the matrix of the random no. with rand option
np.random.rand(4,4)

# TO make the matrix of the random variable but some value wil  be specifeid that must be present there
np.random.randint(-4,8,size=(3,3))

# to make the identity mattrix but bby specifying the size of the matrix
np.identity(5)

# Doing some operation on the matrix like reperating the matrix by specifying the value
arr = np.array([[1,2,3]])
r1 = np.repeat(arr,3,axis = 0)
print(r1)

# Assignment for daily
output = np.ones((5,5))
print(output)
z = np.zeros((3,3))
z[1,1] = 9
print(z)
output[1:-1,1:-1] = z
print(output)

# Be carefull while copying the array
a = np.array([1,2,3])
b = a.copy()
print(b)

"""# Mathermatics:"""

import numpy as np
a = np.array([1,2,3,4,5])
print(a)

a + 2

a - 2

a * 2

a / 2

# Orginal array is = [1,2,3,4,5]
# It is used to obtain the square
a ** 2

# To find the cos value of all present data
np.cos(a)
# For a lot more (https://docs.scipy.org/doc/numpy/reference/routines.math.html)

"""# Linear Algebra:"""

import numpy as np
a = np.ones((2,3))
print(a)
b = np.full((3,2),2)
print(b)
np.matmul(a,b) # Matrix Multiplication

# To find the determinant of the matrix
c = np.identity(3)
np.linalg.det(c)
# https://docs.scipy.org/doc/numpy/reference/routines.linalg.html (Many operation can been done from this link)

"""# Statistic:"""

stats = np.array([[1,2,3],[4,5,6]])
print(stats)

# To find the minimum value from the array
np.min(stats)

# To find the max value from wrt axis
np.max(stats,axis = 1)

# To print the sum according to the given value
np.sum(stats,axis = 0)

"""# Reorganizing The Array:"""

before = np.array([[1,2,3,4],[5,6,7,8]])
print(before)
after = before.reshape((8,1))
print(after)

# Merge is into the stack
v1 = np.array([1,2,3,4])
v2 = np.array([5,6,7,8])
np.vstack([v1,v2,v1,v2])

# Horizontal Stack
h1 = np.ones((2,4))
h2 = np.zeros((2,2))
np.hstack((h1,h2))

"""# Miscellaneous:"""

